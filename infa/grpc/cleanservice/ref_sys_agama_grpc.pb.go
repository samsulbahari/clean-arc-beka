// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: infa/grpc/cleanservice/ref_sys_agama.proto

package cleanservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RefSysAgamaServerClient is the client API for RefSysAgamaServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefSysAgamaServerClient interface {
	GetData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RefSysAgamas, error)
}

type refSysAgamaServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRefSysAgamaServerClient(cc grpc.ClientConnInterface) RefSysAgamaServerClient {
	return &refSysAgamaServerClient{cc}
}

func (c *refSysAgamaServerClient) GetData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RefSysAgamas, error) {
	out := new(RefSysAgamas)
	err := c.cc.Invoke(ctx, "/ref_sys_agama.RefSysAgamaServer/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefSysAgamaServerServer is the server API for RefSysAgamaServer service.
// All implementations must embed UnimplementedRefSysAgamaServerServer
// for forward compatibility
type RefSysAgamaServerServer interface {
	GetData(context.Context, *Empty) (*RefSysAgamas, error)
	mustEmbedUnimplementedRefSysAgamaServerServer()
}

// UnimplementedRefSysAgamaServerServer must be embedded to have forward compatible implementations.
type UnimplementedRefSysAgamaServerServer struct {
}

func (UnimplementedRefSysAgamaServerServer) GetData(context.Context, *Empty) (*RefSysAgamas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedRefSysAgamaServerServer) mustEmbedUnimplementedRefSysAgamaServerServer() {}

// UnsafeRefSysAgamaServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefSysAgamaServerServer will
// result in compilation errors.
type UnsafeRefSysAgamaServerServer interface {
	mustEmbedUnimplementedRefSysAgamaServerServer()
}

func RegisterRefSysAgamaServerServer(s grpc.ServiceRegistrar, srv RefSysAgamaServerServer) {
	s.RegisterService(&RefSysAgamaServer_ServiceDesc, srv)
}

func _RefSysAgamaServer_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefSysAgamaServerServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ref_sys_agama.RefSysAgamaServer/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefSysAgamaServerServer).GetData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// RefSysAgamaServer_ServiceDesc is the grpc.ServiceDesc for RefSysAgamaServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefSysAgamaServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ref_sys_agama.RefSysAgamaServer",
	HandlerType: (*RefSysAgamaServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _RefSysAgamaServer_GetData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infa/grpc/cleanservice/ref_sys_agama.proto",
}
